syntax = "proto3";
package myco;

// Common types
message Bucket {
  bytes data = 1;
  bytes signature = 2;
}

message Key {
  bytes data = 1;
}

// Server1 Service
service Server1Service {
  rpc QueueWrite(QueueWriteRequest) returns (QueueWriteResponse);
  rpc BatchWrite(BatchWriteRequest) returns (BatchWriteResponse);
  rpc BatchInit(BatchInitRequest) returns (BatchInitResponse);
}

message QueueWriteRequest {
  bytes ct = 1;
  bytes ct_ntf = 2;
  bytes f = 3;
  bytes f_ntf = 4;
  Key k_renc_t = 5;
  bytes c_s = 6;
}

message QueueWriteResponse {
  bool success = 1;
}

message BatchWriteRequest {}

message BatchWriteResponse {
  bool success = 1;
}

message BatchInitRequest {
  uint32 num_writes = 1;
}

message BatchInitResponse {
  bool success = 1;
}

// Server2 Service
service Server2Service {
  rpc Read(ReadRequest) returns (ReadResponse);
  rpc Write(stream WriteRequest) returns (WriteResponse);
  rpc ChunkWrite(stream ChunkWriteRequest) returns (ChunkWriteResponse);
  rpc GetPrfKeys(GetPrfKeysRequest) returns (GetPrfKeysResponse);
  rpc ReadNotifs(ReadNotifsRequest) returns (ReadNotifsResponse);
  
  // New methods: separate notification chunk streaming and PRF key addition.
  rpc NotifChunkStream(stream NotifChunkRequest) returns (NotifChunkResponse);
  rpc AddPrfKey(AddPrfKeyRequest) returns (AddPrfKeyResponse);
  
  // New method for getting MegaClient writes
  rpc GetMegaClientWrites(GetMegaClientWritesRequest) returns (stream GetMegaClientWritesResponse);
  
  // New method for sending indices
  rpc ChunkProcessRead(ChunkProcessReadRequest) returns (ChunkProcessReadResponse);
  
  // Replace with bidirectional streaming methods
  rpc StreamProcessReadIndices(stream ChunkProcessReadIndicesRequest) returns (stream ChunkProcessReadIndicesResponse);
  rpc StreamProcessNotifIndices(stream ChunkProcessNotifIndicesRequest) returns (stream ChunkProcessNotifIndicesResponse);
  
  // Keep the original methods for backward compatibility
  rpc ChunkProcessReadIndices(ChunkProcessReadIndicesRequest) returns (ChunkProcessReadIndicesResponse);
  rpc ChunkProcessNotifIndices(ChunkProcessNotifIndicesRequest) returns (ChunkProcessNotifIndicesResponse);
  
  // Add to Server2Service
  rpc GetAllClientPrfKeys(GetAllClientPrfKeysRequest) returns (GetAllClientPrfKeysResponse);

  // Add to Server2Service
  rpc PreGenerateTestData(PreGenerateTestDataRequest) returns (PreGenerateTestDataResponse);
}

message ReadRequest {
  bytes index = 1;
}

message ReadResponse {
  repeated Bucket buckets = 1;
}

message WriteRequest {
  repeated Bucket pathset = 1;
  Key prf_key = 2;
}

message WriteResponse {
  bool success = 1;
}

message ChunkWriteRequest {
  repeated Bucket buckets = 1;
  repeated uint32 pathset_indices = 2 [packed=true];
}

message ChunkWriteResponse {
  bool success = 1;
}

message GetPrfKeysRequest {
  uint32 num_clients = 1;
}

message GetPrfKeysResponse {
  repeated Key keys = 1;
}

message ReadNotifsRequest {
  message Indices {
    repeated bytes index = 1;
  }
  map<uint64, Indices> notifications = 1;
}

message ReadNotifsResponse {
  message Buckets {
    repeated Bucket bucket = 1;
  }
  map<uint64, Buckets> epoch_buckets = 1;
}

// New messages for separate notification chunking and adding PRF key:
message NotifChunkRequest {
  bytes raw_notification_data = 1;
  uint32 num_buckets = 2;
  uint32 start_index = 3;  // Starting index for this chunk's notifications
}

message NotifChunkResponse {
  bool success = 1;
}

message AddPrfKeyRequest {
  Key prf_key = 1;
}

message AddPrfKeyResponse {
  bool success = 1;
}

// New method for getting MegaClient writes
message GetMegaClientWritesRequest {
  uint32 chunk_index = 1;
  uint32 chunk_size = 2;
}

message GetMegaClientWritesResponse {
  repeated bytes cts = 1;
  repeated bytes ct_ntfs = 2;
  repeated bytes fs = 3;
  repeated bytes f_ntfs = 4;
  repeated Key k_renc_ts = 5;
  repeated bytes c_ss = 6;
  bool is_last_chunk = 7;
}

// Replace SendIndices with ChunkProcessRead
message ChunkProcessReadRequest {
  repeated bytes notification_indices = 1;
  repeated bytes read_indices = 2;
}

message ChunkProcessReadResponse {
  repeated Bucket read_buckets = 1;
  repeated Bucket notification_buckets = 2;
  uint32 processing_time_ms = 3;
}

// New separate messages for read and notification processing
message ChunkProcessReadIndicesRequest {
  repeated bytes read_indices = 1;
}

message ChunkProcessReadIndicesResponse {
  repeated Bucket read_buckets = 1;
  uint32 processing_time_ms = 2;
  bool is_last_chunk = 3;  // Indicates if this is the last chunk
}

message ChunkProcessNotifIndicesRequest {
  repeated bytes notification_indices = 1;
}

message ChunkProcessNotifIndicesResponse {
  // Replace individual buckets with raw bytes
  bytes raw_bucket_data = 1;
  uint32 num_buckets = 2;
  uint32 processing_time_ms = 3;
  bool is_last_chunk = 4;
}

// Add new message definitions
message GetAllClientPrfKeysRequest {
  uint32 num_clients = 1;
  uint32 start_client_index = 2;
}

message GetAllClientPrfKeysResponse {
  repeated Key client_keys = 1;
  uint32 total_key_bytes = 2; // For reporting purposes
  uint32 remaining_clients = 3; // Indicates if more chunks are needed
}

// Add near the end of the file
message PreGenerateTestDataRequest {}

message PreGenerateTestDataResponse {
  bool success = 1;
}